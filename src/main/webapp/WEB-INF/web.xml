<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="3.0"
 xmlns="http://java.sun.com/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
 <display-name>Canigo 3.0</display-name>
 <!-- 
		Paràmetre de context que utilitza el org.springframework.web.context.ContextLoaderListener
		per inicialitzar el context de Spring.
	 -->
 <context-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>classpath:cat/gencat/ctti/canigo/arch/core/config/canigo-core.xml</param-value>
 </context-param>
 
 <!--	
<filter>
  <filter-name>CorsFilter</filter-name>
  <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
  <init-param>
    <param-name>cors.allowed.origins</param-name>
    <param-value>*</param-value>
  </init-param>
  <init-param>
    <param-name>cors.allowed.methods</param-name>
    <param-value>GET,POST,HEAD,OPTIONS,PUT,DELETE</param-value>
  </init-param>
  <init-param>
    <param-name>cors.allowed.headers</param-name>
    <param-value>Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers</param-value>
  </init-param>
  <init-param>
    <param-name>cors.exposed.headers</param-name>
    <param-value>Access-Control-Allow-Origin,Access-Control-Allow-Credentials</param-value>
  </init-param>
  <init-param>
    <param-name>cors.support.credentials</param-name>
    <param-value>true</param-value>
  </init-param>
  <init-param>
    <param-name>cors.preflight.maxage</param-name>
    <param-value>10</param-value>
  </init-param>
</filter>
-->

<filter>
	<filter-name>CorsFilter</filter-name>
	<filter-class>cat.gencat.equipaments.filters.CorsFilter</filter-class>
	<async-supported>true</async-supported>
</filter>
 
 <!--
		Filtre que inicialitza les traces de l'aplicació. Es pot sobrecarregar
		per afegir dades aplicatives al pattern de log4j
	-->
 <filter>
  <filter-name>Logging Filter</filter-name>
  <filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LoggingFilter</filter-class>
  <async-supported>true</async-supported>
 </filter>
 <!--
		Filtre que proporciona a l'aplicació el suport d'internacionalització
		a l'aplicació
	-->
 <filter>
  	<filter-name>Localization Filter</filter-name>
  	<filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LocalizationFilter</filter-class>
	<async-supported>true</async-supported>
 </filter>
 <!-- 
	UrlRewriteFilter 
	 -->
 <filter>
  <filter-name>UrlRewriteFilter</filter-name>
  <filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.urlrewrite.UrlRewriteFilter</filter-class>
  <async-supported>true</async-supported>
  <init-param>
   <param-name>confPath</param-name>
   <param-value>classpath:urlrewrite/urlrewrite.xml</param-value>
  </init-param>
 </filter>
 
 
 <filter-mapping>
  <filter-name>CorsFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>
 
 <filter-mapping>
  <filter-name>Logging Filter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>
 <filter-mapping>
  <filter-name>Localization Filter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>
 <filter-mapping>
  <filter-name>UrlRewriteFilter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>
 
 <!--
		If you don't specify the contextConfigLocation context parameter, the
		ContextLoaderListener will look for a /WEB-INF/applicationContext.xml
		file to load. Once the context files are loaded, Spring creates a
		WebApplicationContext object based on the bean definitions and puts it
		into the ServletContext.
	-->
 <listener>
  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>
 <!--
		Servlet 2.4+ listener that exposes the request to the current thread,
		through both LocaleContextHolder and RequestContextHolder. To be
		registered as listener in web.xml. Alternatively, Spring's
		RequestContextFilter and Spring's DispatcherServlet also expose the
		same request context to the current thread. This listener is mainly
		for use with third-party servlets, e.g. the JSF FacesServlet. Within
		Spring's own web support, DispatcherServlet's processing is perfectly
		sufficient.
	-->
 <listener>
  <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
 </listener>

 	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

 <!-- 
		Session timeout: 30 minutes 
	-->
 <session-config>
  <session-timeout>30</session-timeout>
 </session-config>

</web-app>
